datasource db {
  url               = env("DATABASE_URL")
  provider          = "postgresql"
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

model gender{
  gender_id             Int           @id@default(autoincrement())
  gender_name        String @unique
  users              User[]
}

model language{
  language_id            Int          @id@default(autoincrement())
  language_name          String
  language_key           String   @unique
  users                  User[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model User {
  userId                     String    @id @default(cuid())
  userName               String?
  password               String
  email                  String?   @unique
  emailVerified          DateTime?
  image                  String?
  accounts               Account[]
  sessions               Session[]
  language               language       @relation(fields:[language_id],references:[language_id], onDelete: Cascade)
  language_id            Int
  gender                 gender       @relation(fields:[gender_id],references:[gender_id], onDelete: Cascade)
  gender_id              Int
  projects               projects[]
  modules                modules[]
  tasks                  tasks[]
  user_notion            user_notion?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model projects{
  projectId           Int @id@default(autoincrement())
  projectName         String  @unique
  projectCostumer     String
  projectDate         String
  projectVision       String
  projectStatus       String
  projectCompany      companies @relation(fields:[projectCompanyId],references:[companyId], onDelete: Cascade)
  projectCompanyId    Int
  projectModule       modules[]
  projectEmployee     User @relation(fields:[projectEmployeeId],references:[userId], onDelete: Cascade)
  projectEmployeeId   String
  projectNotion       project_notion?
  projectUpdate       String?
}

model companies{
  companyId         Int @id@default(autoincrement())
  companyName       String @unique
  projects          projects[]
  notion_id         String?
}

model modules{
  moduleId          Int @id@default(autoincrement())
  moduleName        String
  moduleComplete    Boolean @default(false)
  moduleProblem     String?
  moduleQuestion    String?
  project           projects @relation(fields:[moduleProjectId],references:[projectId], onDelete:Cascade)
  moduleProjectId   Int
  employee          User @relation(fields:[moduleEmployeeId],references:[userId], onDelete: Cascade)
  moduleEmployeeId  String
  tasks             tasks[]
}

model tasks{
  taskId            Int @id@default(autoincrement())
  taskName          String
  taskComplete      Boolean @default(false)
  employee          User @relation(fields:[taskEmployeeId],references:[userId], onDelete: Cascade)
  taskEmployeeId    String
  module            modules @relation(fields:[taskModuleId],references:[moduleId], onDelete:Cascade)
  taskModuleId      Int
  taskPhase         String?
}



model project_notion{
  project_id          String  @id @default(cuid())
  project_notion_id   String
  project             projects @relation(fields: [project_dbid], references:[projectId], onDelete:Cascade)
  project_dbid        Int             
}


model user_notion{
  user_notion_id      String  @id @default(cuid())
  user_notion_key     String
  user_employee       User   @relation(fields:[user_employee_id],references:[userId], onDelete:Cascade)
  user_employee_id    String
}